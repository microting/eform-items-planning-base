// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microting.ItemsPlanningBase.Infrastructure.Data;

namespace Microting.ItemsPlanningBase.Migrations
{
    [DbContext(typeof(ItemsPlanningPnDbContext))]
    [Migration("20200804131937_FixingMigrations")]
    partial class FixingMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BuildYear")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LocationCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.ItemVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BuildYear")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LocationCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ItemVersions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Planning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BuildYearEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("DeployedAtEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("DescriptionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoneAtEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoneByUserNameEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ItemNumberEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LabelEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastExecutedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LocationCodeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("NumberOfImagesEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RelatedEFormId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEFormName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RepeatEvery")
                        .HasColumnType("int");

                    b.Property<int>("RepeatType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RepeatUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SdkFieldEnabled1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled10")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled4")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled5")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled6")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled7")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled8")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled9")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SdkFieldId1")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId10")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId2")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId3")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId4")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId5")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId6")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId7")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId8")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId9")
                        .HasColumnType("int");

                    b.Property<bool>("TypeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("UploadedDataEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DoneByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DoneByUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("MicrotingSdkCaseDoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MicrotingSdkCaseId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkSiteId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkeFormId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<string>("SdkFieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PlanningCases");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningCaseSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DoneByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DoneByUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("MicrotingSdkCaseDoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MicrotingSdkCaseId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkSiteId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkeFormId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<int>("PlanningCaseId")
                        .HasColumnType("int");

                    b.Property<string>("SdkFieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PlanningCaseSites");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningCaseSiteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DoneByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DoneByUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("MicrotingSdkCaseDoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MicrotingSdkCaseId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkSiteId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkeFormId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<int>("PlanningCaseId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningCaseSiteId")
                        .HasColumnType("int");

                    b.Property<string>("SdkFieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PlanningCaseSiteVersions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningCaseVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DoneByUserId")
                        .HasColumnType("int");

                    b.Property<string>("DoneByUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldStatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("MicrotingSdkCaseDoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MicrotingSdkCaseId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkSiteId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingSdkeFormId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfImages")
                        .HasColumnType("int");

                    b.Property<int>("PlanningCaseId")
                        .HasColumnType("int");

                    b.Property<string>("SdkFieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SdkFieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PlanningCaseVersions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.ToTable("PlanningSites");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningSiteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("PlanningSiteId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PlanningSiteVersions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BuildYearEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("DeployedAtEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("DescriptionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoneAtEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("DoneByUserNameEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ItemNumberEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LabelEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastExecutedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LocationCodeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("NumberOfImagesEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedEFormId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEFormName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RepeatEvery")
                        .HasColumnType("int");

                    b.Property<int>("RepeatType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RepeatUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SdkFieldEnabled1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled10")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled2")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled3")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled4")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled5")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled6")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled7")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled8")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SdkFieldEnabled9")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SdkFieldId1")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId10")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId2")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId3")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId4")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId5")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId6")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId7")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId8")
                        .HasColumnType("int");

                    b.Property<int?>("SdkFieldId9")
                        .HasColumnType("int");

                    b.Property<bool>("TypeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("UploadedDataEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PlanningVersions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.UploadedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentFile")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("PlanningCaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UploaderType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDatas");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.UploadedDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentFile")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("PlanningCaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedDataId")
                        .HasColumnType("int");

                    b.Property<string>("UploaderType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDataVersions");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginConfigurationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValues");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginConfigurationValueVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValueVersions");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginGroupPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PluginGroupPermissions");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginGroupPermissionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("PluginGroupPermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginGroupPermissionVersions");
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginPermissions");
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Item", b =>
                {
                    b.HasOne("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Planning", "Planning")
                        .WithOne("Item")
                        .HasForeignKey("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Item", "PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningCase", b =>
                {
                    b.HasOne("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.PlanningSite", b =>
                {
                    b.HasOne("Microting.ItemsPlanningBase.Infrastructure.Data.Entities.Planning", "Planning")
                        .WithMany("PlanningSites")
                        .HasForeignKey("PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginGroupPermission", b =>
                {
                    b.HasOne("Microting.eFormApi.BasePn.Infrastructure.Database.Entities.PluginPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
